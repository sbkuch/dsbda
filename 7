# Import necessary libraries
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer, WordNetLemmatizer
from nltk import pos_tag
from sklearn.feature_extraction.text import TfidfVectorizer

# Download required NLTK resources
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('averaged_perceptron_tagger')
nltk.download('wordnet')
nltk.download('omw-1.4')

# Sample document
text = "Natural Language Processing with Python is very interesting and fun to learn!"

# 1. Tokenization
tokens = word_tokenize(text)
print("ðŸ”¹ Tokens:", tokens)

# 2. POS Tagging (Part of Speech)
pos_tags = pos_tag(tokens)
print("ðŸ”¹ POS Tags:", pos_tags)

# 3. Stopwords Removal
stop_words = set(stopwords.words('english'))
filtered_tokens = [word for word in tokens if word.lower() not in stop_words]
print("ðŸ”¹ Tokens after Stopword Removal:", filtered_tokens)

# 4. Stemming
stemmer = PorterStemmer()
stemmed_words = [stemmer.stem(word) for word in filtered_tokens]
print("ðŸ”¹ Stemmed Words:", stemmed_words)

# 5. Lemmatization
lemmatizer = WordNetLemmatizer()
lemmatized_words = [lemmatizer.lemmatize(word) for word in filtered_tokens]
print("ðŸ”¹ Lemmatized Words:", lemmatized_words)

# Second document to show TF-IDF effectively
doc2 = "Python and NLTK are useful tools for text processing."

# 6. TF-IDF (Term Frequency - Inverse Document Frequency)
documents = [text, doc2]
tfidf_vectorizer = TfidfVectorizer()
tfidf_matrix = tfidf_vectorizer.fit_transform(documents)

# Displaying TF-IDF values
print("\nðŸ”¹ TF-IDF Matrix (terms Ã— documents):")
print(tfidf_matrix.toarray())
print("\nðŸ”¹ Feature Names:")
print(tfidf_vectorizer.get_feature_names_out())

from sklearn.feature_extraction.text import TfidfVectorizer

# Sample corpus of documents
corpus = [
    "Python is a great language for data science.",
    "Natural language processing with Python is powerful.",
    "Text analytics is a part of data science."
]

# Create TF-IDF Vectorizer
vectorizer = TfidfVectorizer()

# Fit and transform the corpus
X = vectorizer.fit_transform(corpus)

# Convert to dense matrix and display
tfidf_matrix = X.toarray()
print("TF-IDF Matrix:\n", tfidf_matrix)

# Display feature names (terms)
print("Vocabulary (terms):", vectorizer.get_feature_names_out())
