import pandas as pd
import numpy as np

data = {
    'student_id': [1, 2, 3, 4, 5, 6, 7],
    'name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
    'age': [15, 16, np.nan, 15, 17, 16, 15],
    'gender': ['F', 'M', 'M', 'M', 'F', 'M', None],
    'math_score': [88, 92, 40, 95, 200, 85, 87],  # 200 is an outlier
    'english_score': [85, 89, 75, 91, 77, np.nan, 84],
    'science_score': [78, 94, 70, 89, 76, 90, 95],
    'attendance_percentage': [92, 88, 60, 100, 95, 87, 30]  # 30 is low
}

df = pd.DataFrame(data)
print(df)

# Checking for missing values
print(df.isnull().sum())

df['age'] = df['age'].fillna(df['age'].mean())
df['gender'] = df['gender'].fillna(df['gender'].mode()[0])
df['english_score'] = df['english_score'].fillna(df['english_score'].median())

def detect_outliers_iqr(data, col):
    Q1 = data[col].quantile(0.25)
    Q3 = data[col].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    return data[(data[col] < lower) | (data[col] > upper)]

outliers_math = detect_outliers_iqr(df, 'math_score')
print(outliers_math)

upper_cap = int(df['math_score'].quantile(0.95))
df.loc[df['math_score'] > upper_cap, 'math_score'] = upper_cap

import seaborn as sns
import matplotlib.pyplot as plt

# Before transformation
sns.histplot(df['attendance_percentage'], kde=True)
plt.title("Before Transformation")
plt.show()

# Apply log transformation
df['log_attendance'] = np.log1p(df['attendance_percentage'])

# After transformation
sns.histplot(df['log_attendance'], kde=True)
plt.title("After Log Transformation")
plt.show()

